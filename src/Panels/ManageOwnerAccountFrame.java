package Panels;

import Classes.Loader;
import Classes.Owner;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author smart view
 */
public class ManageOwnerAccountFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form ManageOwnerAccountFrame
     */
    public ManageOwnerAccountFrame(String id) throws FileNotFoundException {
        initComponents();
        userID = id;
        dm = (DefaultTableModel) jTable1.getModel();
        li.Owner();
        oWlist = li.return_Owner();
        li.loginH();
        loginH = li.return_loginH();
        for(String obj : loginH)
        {
            String[] split = obj.split("~");
            if(split[0].equals(id))
            {
                dm.addRow(new Object[]{split[1], split[2]});
            }
        }
        for(Owner obj:oWlist)
        {
            if(obj.getID().equals(userID))
            {
               fName = obj.getName();
               contact = obj.get_mobile();
                addr = obj.get_address();
                div = obj.get_division();
                em = obj.get_email();
                zip  = obj.get_zip();
                pass = obj.get_password();
                securityQ = obj.get_securityQ();
                securityAns  = obj.get_securityAns();
                gm  = obj.get_gender();
                d = obj.get_birthDate();
                c = obj.get_Jdate();
            }
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        nameField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        oldPassLabel = new javax.swing.JLabel();
        newPassLabel = new javax.swing.JLabel();
        newPassField = new javax.swing.JPasswordField();
        oldPassField = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jTabbedPane1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N

        jPanel2.setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        nameLabel.setText("New Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(81, 223, 0, 0);
        jPanel2.add(nameLabel, gridBagConstraints);

        passLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        passLabel.setText("Type your password: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 223, 0, 0);
        jPanel2.add(passLabel, gridBagConstraints);

        passField.setText("jPasswordField1");
        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 133;
        gridBagConstraints.ipady = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 348);
        jPanel2.add(passField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 133;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(81, 18, 0, 348);
        jPanel2.add(nameField, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(0, 153, 51));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("DONE!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(44, 74, 181, 348);
        jPanel2.add(jButton1, gridBagConstraints);

        jTabbedPane1.addTab("Change Name", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        oldPassLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        oldPassLabel.setText("Old Password: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(96, 286, 0, 0);
        jPanel3.add(oldPassLabel, gridBagConstraints);

        newPassLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        newPassLabel.setText("New Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 286, 0, 0);
        jPanel3.add(newPassLabel, gridBagConstraints);

        newPassField.setText("jPasswordField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 26, 0, 266);
        jPanel3.add(newPassField, gridBagConstraints);

        oldPassField.setText("jPasswordField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(100, 26, 0, 266);
        jPanel3.add(oldPassField, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(0, 153, 51));
        jButton2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton2.setText("Done!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(98, 47, 91, 266);
        jPanel3.add(jButton2, gridBagConstraints);

        jTabbedPane1.addTab("Change Password", jPanel3);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jTable1.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Login Day", "Login Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 93;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(80, 197, 249, 227);
        jPanel4.add(jScrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("Review Login", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void start_ownerUpdate()
     {
        SwingWorker<Boolean,Void> worker = new SwingWorker<Boolean,Void>(){
            @Override
            public Boolean doInBackground() throws Exception{
                String fileName="Owner.bin";
               File file = new File (fileName);
                ObjectOutputStream out = null;
                    try{
                        out = new ObjectOutputStream (new FileOutputStream (fileName, false));
                        for(Owner obj: oWlist)
                        {
                        out.writeObject(obj);    
                        }
                        out.flush ();
                    }catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
        }
                return true;
            }

           
        };
        worker.execute(); 
     }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean name = false, password = false;
        if(nameField.getText().equals(""))
        {
            nameLabel.setForeground(Color.red);
            nameField.requestFocus();
        }
        else
        {
            nameLabel.setForeground(Color.black);
            name = true;
        }
        if(passField.getPassword().length == 0)
        {
            passLabel.setForeground(Color.red);
            System.out.println("too short");
            passField.requestFocus();
        }
        else
        {
            passLabel.setForeground(Color.black);
            for(Owner obj : oWlist)
            {
                if(obj.getID().equals(userID) && obj.get_password().equals(String.valueOf(passField.getPassword())))
                {
                    password = true;
                }
                else
                {
                    passLabel.setForeground(Color.red);
                }
            }
        }
        if(name == true && password == true)
        {
        Iterator<Owner> oWitr = oWlist.iterator(); 
        while(oWitr.hasNext())
        {
            Owner delOw = oWitr.next();
            if(delOw.getID().equals(userID))
            {
                oWitr.remove();
            }
        }
        oW = new Owner();
         oW.updateAccounts(userID, nameField.getText(), contact, addr, div, em, zip, pass, securityQ, securityAns, gm, d,c, "" , "" , LocalTime.MAX, LocalTime.MIN, 0, "");
         oWlist.add(oW);
         start_ownerUpdate();
         this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
   boolean passCheck(char[] pass)
    {
        boolean foundUpper = false, foundLower = false, foundAlpha = false;
        
        if(pass.length<8)
        {
            return false;
        }
        
        for(int i = 0; i<pass.length; i++)        
        {
            if(Character.isAlphabetic(pass[i]))
            {
                foundAlpha = true;
                if(Character.isUpperCase(pass[i]))
                {
                    foundUpper = true;
                }
                else
                {
                    foundLower = true;
                }
            }
        }
        if(foundUpper == true && foundLower == true && foundAlpha == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       boolean oldPass = false, newPass = false;
        if(oldPassField.getPassword().length == 0)
        {
            oldPassField.setForeground(Color.red);
            oldPassField.requestFocus();
        }
        else
        {
          passLabel.setForeground(Color.black);
            for(Owner obj : oWlist)
            {
                if(obj.get_password().equals(String.valueOf(oldPassField.getPassword())) && obj.getID().equals(userID))
                {
                    oldPass = true;
                }
                else
                {
                    passLabel.setForeground(Color.red);
                }
            }
        }
        if(newPassField.getPassword().length == 0)
        {
           newPassField.setForeground(Color.red);
           newPassField.requestFocus();
        }
        else if(passCheck(newPassField.getPassword()) == false)
        {
           newPassField.setBackground(Color.red);
           newPassField.requestFocus();
        }
        else
        {
            newPassField.setForeground(Color.black);
            newPassField.setBackground(Color.black);
            newPass = true;      
        }
        
        if(newPass == true && oldPass == true)
        {
        Iterator<Owner> oWitr = oWlist.iterator(); 
        while(oWitr.hasNext())
        {
            Owner delOw = oWitr.next();
            if(delOw.getID().equals(userID))
            {
                oWitr.remove();
            }
        }
        oW = new Owner();
         oW.updateAccounts(userID, fName, contact, addr, div, em, zip, String.valueOf(newPassField.getPassword()), securityQ, securityAns, gm, d,c, "" , "" , LocalTime.MAX, LocalTime.MIN, 0, "");
         oWlist.add(oW);
         start_ownerUpdate();
         this.dispose();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passFieldActionPerformed
String userID, fName, contact, addr, div, em, pass,  securityQ,  securityAns,  gm;
int zip;
LocalDate d, c;
Loader li = new Loader();
Owner oW;
ArrayList<Owner> oWlist = new ArrayList<>();
ArrayList<String> loginH = new ArrayList<>();
DefaultTableModel dm;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField newPassField;
    private javax.swing.JLabel newPassLabel;
    private javax.swing.JPasswordField oldPassField;
    private javax.swing.JLabel oldPassLabel;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel passLabel;
    // End of variables declaration//GEN-END:variables
}
