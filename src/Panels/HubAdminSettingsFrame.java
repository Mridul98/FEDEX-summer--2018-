/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Classes.BusinessCustomer;
import Classes.HubAdmin;
import Classes.HubStaff;
import Classes.Loader;
import Classes.PersonalCustomer;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author smart view
 */
public class HubAdminSettingsFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form HubAdminSettingsFrame
     */
    public HubAdminSettingsFrame(String id, int i) throws FileNotFoundException {
        initComponents();
        selector = i;
        dm = (DefaultTableModel) loginHtable.getModel();
        li.loginH();
        loginH = li.return_loginH();
        for(String obj : loginH)
        {
            String[] split = obj.split("~");
            if(split[0].equals(id))
            {
                dm.addRow(new Object[]{split[1], split[2]});
            }
        }
         if(selector == 1 )
        {
        userID = id;
        li.HubAdmins();
        hAlist = li.return_hubAdmin();
        for(HubAdmin obj : hAlist)
        {
            if(obj.getID().equals(userID))
            {
               fName = obj.getName();
               nameField.setText(fName);
               contact = obj.get_mobile();
               contactField.setText(contact);
                addr = obj.get_address();
                addrField.setText(addr);
                div = obj.get_division();
                divisionField.setText(div);
                em = obj.get_email();
                emailField.setText(em);
                zip  = obj.get_zip();
                zipField.setText(Integer.toString(zip));
                pass = obj.get_password();
                securityQ = obj.get_securityQ();
                securityQCombo.setSelectedItem(securityQ);
                securityAns  = obj.get_securityAns();
                securityAnswer.setText(securityAns);
                gm  = obj.get_gender();
                d = obj.get_birthDate();
                c = obj.get_Jdate();
                sShift = obj.getStartShift();
                eShift = obj.getEndShift();
                salary = obj.getSalary();
                branch = obj.getBranch();
            }
        }
        }
        else
        {
         userID = id;
        li.HubStaff();
        hSlist = li.return_hubStaff();
        for(HubStaff obj : hSlist)
        {
            if(obj.getID().equals(userID))
            {
               fName = obj.getName();
               nameField.setText(fName);
               contact = obj.get_mobile();
               contactField.setText(contact);
                addr = obj.get_address();
                addrField.setText(addr);
                div = obj.get_division();
                divisionField.setText(div);
                em = obj.get_email();
                emailField.setText(em);
                zip  = obj.get_zip();
                zipField.setText(Integer.toString(zip));
                pass = obj.get_password();
                securityQ = obj.get_securityQ();
                securityQCombo.setSelectedItem(securityQ);
                securityAns  = obj.get_securityAns();
                securityAnswer.setText(securityAns);
                gm  = obj.get_gender();
                d = obj.get_birthDate();
                c = obj.get_Jdate();
                sShift = obj.getStartShift();
                eShift = obj.getEndShift();
                salary = obj.getSalary();
                branch = obj.getBranch();
                
            }
        }  
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        oldpassLabel = new javax.swing.JLabel();
        oldPassField = new javax.swing.JPasswordField();
        newPassField = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        passField = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        contactLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        contactField = new javax.swing.JTextField();
        addrField = new javax.swing.JTextField();
        securityQCombo = new javax.swing.JComboBox<>();
        securityAnswer = new javax.swing.JTextField();
        divisionField = new javax.swing.JTextField();
        zipField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loginHtable = new javax.swing.JTable();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jTabbedPane1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel1.setText("Type New Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 185, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        oldpassLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        oldpassLabel.setText("Type Old Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(103, 185, 0, 0);
        jPanel1.add(oldpassLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 118;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(109, 18, 0, 245);
        jPanel1.add(oldPassField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 118;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 18, 0, 245);
        jPanel1.add(newPassField, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(0, 153, 51));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("Change");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 47, 78, 245);
        jPanel1.add(jButton1, gridBagConstraints);

        jTabbedPane1.addTab("Change Password", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        nameLabel.setText("New Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(77, 145, 0, 0);
        jPanel2.add(nameLabel, gridBagConstraints);

        passLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        passLabel.setText("Type Your Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 145, 0, 0);
        jPanel2.add(passLabel, gridBagConstraints);

        nameField.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 145;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(81, 36, 0, 236);
        jPanel2.add(nameField, gridBagConstraints);

        passField.setText("jPasswordField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 145;
        gridBagConstraints.ipady = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 36, 0, 236);
        jPanel2.add(passField, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(0, 153, 51));
        jButton2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton2.setText("Change");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 87, 184, 236);
        jPanel2.add(jButton2, gridBagConstraints);

        jTabbedPane1.addTab("Change Name", jPanel2);

        jLabel5.setText("Zip Code");

        jLabel6.setText("Division");

        jLabel7.setText("Security Question");

        jLabel8.setText("Security Answer");

        addressLabel.setText("Address");

        contactLabel.setText("Contact Number");

        emailLabel.setText("Email");

        emailField.setText("jTextField1");

        contactField.setText("jTextField1");

        addrField.setText("jTextField1");

        securityQCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        securityQCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "What is your pets name?", "What is the password of your cellphone?", "Do you trust yourself?" }));

        securityAnswer.setText("jTextField1");

        divisionField.setText("jTextField1");

        zipField.setText("jTextField1");

        jButton3.setText("Done");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addrField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(securityQCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(contactField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(securityAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(divisionField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zipField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(462, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(168, 168, 168))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addrField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(securityQCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(securityAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(divisionField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(contactField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zipField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(61, 61, 61))
        );

        jTabbedPane1.addTab("Change Other Details", jPanel4);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        loginHtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Login Date", "Login Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(loginHtable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 502;
        gridBagConstraints.ipady = 89;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(43, 95, 290, 106);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("View Login History", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  public void start_Update()
     {
        SwingWorker<Boolean,Void> worker = new SwingWorker<Boolean,Void>(){
            @Override
            public Boolean doInBackground() throws Exception{
                String fileName = "";
                if(selector==1)
                {
                fileName="HubAdmin.bin";
                }
                else
                {
                fileName="HubStaff.bin"; 
                }
               File file = new File (fileName);
                ObjectOutputStream out = null;
                    try{
                        out = new ObjectOutputStream (new FileOutputStream (fileName, false));
                        if(selector ==1)
                        {
                        for(HubAdmin obj: hAlist)
                        {
                        out.writeObject(obj);    
                        }
                        }
                        else
                        {
                        for(HubStaff obj: hSlist)
                        {
                        out.writeObject(obj);    
                        }    
                        }
                        out.flush ();
                    }catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
        }
                return true;
            }

           
        };
        worker.execute(); 
     }
    
    
    
    boolean passCheck(char[] pass)
    {
        boolean foundUpper = false, foundLower = false, foundAlpha = false;
        
        if(pass.length<8)
        {
            return false;
        }
        
        for(int i = 0; i<pass.length; i++)        
        {
            if(Character.isAlphabetic(pass[i]))
            {
                foundAlpha = true;
                if(Character.isUpperCase(pass[i]))
                {
                    foundUpper = true;
                }
                else
                {
                    foundLower = true;
                }
            }
        }
        if(foundUpper == true && foundLower == true && foundAlpha == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      boolean oldPass = false, newPass = false;
        if(oldPassField.getPassword().length == 0)
        {
            oldPassField.setForeground(Color.red);
            oldPassField.requestFocus();
        }
        else
        {
          oldpassLabel.setForeground(Color.black);
          if(selector ==1)  
          {
          for(HubAdmin obj : hAlist)
            {
                if(obj.get_password().equals(String.valueOf(oldPassField.getPassword())) && obj.getID().equals(userID))
                {
                    oldPass = true;
                }
                else
                {
                    oldpassLabel.setForeground(Color.red);
                }
            }
          }
          else
          {
              for(HubStaff obj : hSlist)
            {
                if(obj.get_password().equals(String.valueOf(oldPassField.getPassword())) && obj.getID().equals(userID))
                {
                    oldPass = true;
                }
                else
                {
                    oldpassLabel.setForeground(Color.red);
                }
            }
          }
        
        }
        if(newPassField.getPassword().length == 0)
        {
           newPassField.setForeground(Color.red);
           newPassField.requestFocus();
        }
        else if(passCheck(newPassField.getPassword()) == false)
        {
           newPassField.setBackground(Color.red);
           newPassField.requestFocus();
        }
        else
        {
            newPassField.setForeground(Color.black);
            newPassField.setBackground(Color.black);
            newPass = true;      
        }
        
        if(selector == 1)
        {
            Iterator<HubAdmin> hAitr = hAlist.iterator(); 
            while(hAitr.hasNext())
            {
                HubAdmin delhA = hAitr.next();
                if(delhA.getID().equals(userID))
                {
                    hAitr.remove();
                }
            }
            hA = new HubAdmin();
             hA.updateAccounts(userID, fName, contact, addr, div, em, zip, String.valueOf(newPassField.getPassword()), securityQ, securityAns, gm, d,c, branch , "" , sShift, eShift, salary, "");
             hAlist.add(hA);
             start_Update();
        }
        else
        {
            Iterator<HubStaff> hSitr = hSlist.iterator(); 
            while(hSitr.hasNext())
            {
                HubStaff delhS = hSitr.next();
                if(delhS.getID().equals(userID))
                {
                    hSitr.remove();
                }
            }
            hS = new HubStaff();
             hS.updateAccounts(userID, fName, contact, addr, div, em, zip, String.valueOf(newPassField.getPassword()), securityQ, securityAns, gm, d,c, branch , "" , sShift, eShift, salary, "");
             hSlist.add(hS);
             start_Update();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       boolean name = false, password = false;
        if(nameField.getText().equals(""))
        {
            nameLabel.setForeground(Color.red);
            nameField.requestFocus();
        }
        else
        {
            nameLabel.setForeground(Color.black);
            name = true;
        }
        if(passField.getPassword().length == 0)
        {
            passLabel.setForeground(Color.red);
            passField.requestFocus();
        }
        else
        {
            passLabel.setForeground(Color.black);
            
            if(selector == 1)
            {
            for(HubAdmin obj : hAlist)
            {
                if(obj.getID().equals(userID) && obj.get_password().equals(String.valueOf(passField.getPassword())))
                {
                    password = true;
                }
                else
                {
                    passLabel.setForeground(Color.red);
                }
            }
            }
            else
            {
               for(HubStaff obj : hSlist)
            {
                if(obj.getID().equals(userID) && obj.get_password().equals(String.valueOf(passField.getPassword())))
                {
                    password = true;
                }
                else
                {
                    passLabel.setForeground(Color.red);
                }
            } 
            }
        }
        if(selector == 1)
        {
            Iterator<HubAdmin> hAitr = hAlist.iterator(); 
            while(hAitr.hasNext())
            {
                HubAdmin delhA = hAitr.next();
                if(delhA.getID().equals(userID))
                {
                    hAitr.remove();
                }
            }
            hA = new HubAdmin();
             hA.updateAccounts(userID, nameField.getText(), contact, addr, div, em, zip, pass, securityQ, securityAns, gm, d,c, branch , "" , sShift, eShift, salary, "");
             hAlist.add(hA);
             start_Update();
        }
        else
        {
            Iterator<HubStaff> hSitr = hSlist.iterator(); 
            while(hSitr.hasNext())
            {
                HubStaff delhS = hSitr.next();
                if(delhS.getID().equals(userID))
                {
                    hSitr.remove();
                }
            }
            hS = new HubStaff();
             hS.updateAccounts(userID, nameField.getText(), contact, addr, div, em, zip, pass, securityQ, securityAns, gm, d,c, branch , "" , sShift, eShift, salary, "");
             hSlist.add(hS);
             start_Update();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       if(selector == 1)
        {
            Iterator<HubAdmin> hAitr = hAlist.iterator(); 
            while(hAitr.hasNext())
            {
                HubAdmin delhA = hAitr.next();
                if(delhA.getID().equals(userID))
                {
                    hAitr.remove();
                }
            }
            hA = new HubAdmin();
             hA.updateAccounts(userID, nameField.getText(), contactField.getText(), addrField.getText(), divisionField.getText(), emailField.getText(), Integer.parseInt(zipField.getText()), pass, securityQCombo.getItemAt(securityQCombo.getSelectedIndex()), securityAnswer.getText(), gm, d,c, branch , "" , sShift, eShift, salary, "");
             hAlist.add(hA);
             start_Update();
        }
        else
        {
            Iterator<HubStaff> hSitr = hSlist.iterator(); 
            while(hSitr.hasNext())
            {
                HubStaff delhS = hSitr.next();
                if(delhS.getID().equals(userID))
                {
                    hSitr.remove();
                }
            }
            hS = new HubStaff();
             hS.updateAccounts(userID, nameField.getText(), contactField.getText(), addrField.getText(), divisionField.getText(), emailField.getText(), Integer.parseInt(zipField.getText()), pass, securityQCombo.getItemAt(securityQCombo.getSelectedIndex()), securityAnswer.getText(), gm, d,c, branch , "" , sShift, eShift, salary, "");
             hSlist.add(hS);
             start_Update();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    HubAdmin hA;
    HubStaff hS;
    ArrayList<HubAdmin> hAlist = new ArrayList<>();
    ArrayList<HubStaff> hSlist = new ArrayList<>();
    Loader li = new Loader();
    String userID, fName, contact, addr, div, em, pass,  securityQ,  securityAns,  gm, branch;
    int zip, selector =0, salary;
     LocalDate d = null, c = null;
     LocalTime sShift, eShift;
   ArrayList<String> loginH = new ArrayList<>();
   DefaultTableModel dm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField contactField;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JTextField divisionField;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable loginHtable;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField newPassField;
    private javax.swing.JPasswordField oldPassField;
    private javax.swing.JLabel oldpassLabel;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel passLabel;
    private javax.swing.JTextField securityAnswer;
    private javax.swing.JComboBox<String> securityQCombo;
    private javax.swing.JTextField zipField;
    // End of variables declaration//GEN-END:variables

    // End of variables declaration                   
}  
