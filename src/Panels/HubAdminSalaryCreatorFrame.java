/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Classes.AirCargoPilot;
import Classes.HubAdmin;
import Classes.HubStaff;
import Classes.Loader;
import Classes.LorryPilot;
import Classes.Owner;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.glass.events.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author smart view
 */
public class HubAdminSalaryCreatorFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form HubAdminSalaryCreatorFrame
     */
    public HubAdminSalaryCreatorFrame(String id) {
        initComponents();
        dm = (DefaultTableModel) salaryTable.getModel();
        username = id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jobselectCombo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        newSalary = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Employee salary sheet");

        jButton1.setBackground(new java.awt.Color(0, 153, 51));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("Load Table ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jobselectCombo.setBackground(new java.awt.Color(0, 204, 102));
        jobselectCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jobselectCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Job Type", "Hub Admins", "Hub Staffs", "Lorry Pilots", "Air Cargo Pilots" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jobselectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jobselectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        salaryTable.setAutoCreateRowSorter(true);
        salaryTable.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Job Type", "Name", "ID", "Assigned Hub", "Date Joined", "Salary", "Change Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salaryTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                salaryTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(salaryTable);

        jButton3.setBackground(new java.awt.Color(0, 102, 51));
        jButton3.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jButton3.setText("Update and Save PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton2.setText("Get Total Salary pdf");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        newSalary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newSalaryKeyPressed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton4.setText("Set Salary");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Highest Salary" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jButton3)
                        .addGap(68, 68, 68)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newSalary)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(newSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void start_update(int x)
     {
        SwingWorker<Boolean,Object[]> worker = new SwingWorker<Boolean,Object[]>(){
            @Override
            public Boolean doInBackground() throws Exception{
                String fileName = "";
                if(x==1)
                {
                    fileName = "HubAdmin.bin";
                }
                else if(x==2)
                {
                    fileName = "HubStaff.bin";
                }
                else if(x==3)
                {
                    fileName = "LorryPilot.bin";
                }
                else if(x==4)
                {
                    fileName = "AirCargoPilot.bin";
                }
               File file = new File (fileName);
                ObjectOutputStream out = null;
                    try{
                        out = new ObjectOutputStream (new FileOutputStream (fileName, false));
                        if(x==1)
                        {
                        for(HubAdmin obj: hAlist)
                        {
                        out.writeObject(obj);    
                        }
                        }
                        else if(x==2)
                        {
                            for(HubStaff obj: hSlist)
                        {
                        out.writeObject(obj);    
                        }
                        }
                        else if(x==3)
                        {
                            for(LorryPilot obj: lPlist)
                        {
                        out.writeObject(obj);    
                        }
                        }
                        else if(x==4)
                        {
                            for(AirCargoPilot obj: aCPlist)
                        {
                        out.writeObject(obj);    
                        }
                        }
                        out.flush ();
                    }catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
        }
                return true;
            }

            @Override
            public void process(List<Object[]> obj){
               // result.setText(result.getText()+"No of Student of "+obj.get(0)[0].toString()+" Dept: "+Integer.parseInt(obj.get(0)[1].toString())+"\n");
            }
            
            @Override
            public void done() {
                boolean done=false;
                try {
                    done = get();
                } catch(Exception ex) {
                    ex.printStackTrace();
                }
                if(done){
                    //statusLabel.setText("Text Files are created successfully");
                }else{
                    //statusLabel.setText("Text Files creation Failed");
                }
            }
        };
        worker.execute(); 
     }
    private  DefaultTableModel model;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      //clearTable
          int row = dm.getRowCount();
          for(int i = 0; i<row; i++)
          {
          dm.removeRow(dm.getRowCount()-1);
          }
      if(jobselectCombo.getSelectedIndex()==0)
      {
         jobselectCombo.requestFocus();
      }
      else if(jobselectCombo.getSelectedIndex()==1)
      {
          //AddHubAdmins
          li.HubAdmins();
          hAlist = li.return_hubAdmin();
          for(HubAdmin obj:hAlist)
          {
              dm.addRow(new Object[]{"Hub Admin", obj.getName(),obj.getID(), obj.getBranch(),obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
      }
      else if(jobselectCombo.getSelectedIndex()==2)
      {
          //AddHubStaff
          li.HubStaff();
          hSlist = li.return_hubStaff();
          for(HubStaff obj:hSlist)
          {
              dm.addRow(new Object[]{"Hub Staff", obj.getName(),obj.getID(), obj.getBranch(),obj.get_Jdate().toString(),Integer.toString(obj.getSalary())});
          }
      }
      else if(jobselectCombo.getSelectedIndex()==3)
      {
          //AddLorryPilots
          li.LorryPilot();
          lPlist = li.return_lorry();
          for(LorryPilot obj:lPlist)
          {
              dm.addRow(new Object[]{"Lorry Pilot", obj.getName(),obj.getID(), obj.getBranch(),obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
      }
      else if(jobselectCombo.getSelectedIndex()==4)
      {
          //AddAirCargoPilots
          li.airCargoPilot();
          aCPlist = li.return_pilot();
          for(AirCargoPilot obj:aCPlist)
          {
              dm.addRow(new Object[]{"AirCargoPilot", obj.getName(),obj.getID(), "DHAKA",obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       if(jobselectCombo.getSelectedIndex()==1)
      {
          //AddHubAdmins
          li.HubAdmins();
          hAlist = li.return_hubAdmin();
          for(HubAdmin obj:hAlist)
          {
             for(int i =0; i<dm.getRowCount(); i ++)
             {
                 if(obj.getID().equals((String)dm.getValueAt(i, 2)))
                 {
                     obj.updateSalary(Integer.parseInt((String) dm.getValueAt(i, 5) ));
                 }
             }    
          }
          start_update(1);
      }
      else if(jobselectCombo.getSelectedIndex()==2)
      {
          //AddHubStaff
          li.HubStaff();
          hSlist = li.return_hubStaff();
          for(HubStaff obj:hSlist)
          {
               for(int i =0; i<dm.getRowCount(); i ++)
             {
                 if(obj.getID().equals((String)dm.getValueAt(i, 2)))
                 {
                    obj.updateSalary(Integer.parseInt((String) dm.getValueAt(i, 5) ));
                 }
             }    
          }
          start_update(2);
      }
      else if(jobselectCombo.getSelectedIndex()==3)
      {
          //AddLorryPilots
          li.LorryPilot();
          lPlist = li.return_lorry();
          for(LorryPilot obj:lPlist)
          {
               for(int i =0; i<dm.getRowCount(); i ++)
             {
                 if(obj.getID().equals((String)dm.getValueAt(i, 2)))
                 {
                     obj.updateSalary(Integer.parseInt((String) dm.getValueAt(i, 5) ));
                 }
             }    
          }
          start_update(3);
      }
      else if(jobselectCombo.getSelectedIndex()==4)
      {
          //AddAirCargoPilots
          li.airCargoPilot();
          aCPlist = li.return_pilot();
          for(AirCargoPilot obj:aCPlist)
          {
               for(int i =0; i<dm.getRowCount(); i ++)
             {
                 if(obj.getID().equals((String)dm.getValueAt(i, 2)))
                 {
                     obj.updateSalary(Integer.parseInt((String) dm.getValueAt(i, 5) ));
                 }
             }    
          }
          start_update(4);
      }
        try{
            Document doc = new Document();
            
            String filename = jobselectCombo.getItemAt(jobselectCombo.getSelectedIndex());
            System.out.println(filename);
            PdfWriter writer  = PdfWriter.getInstance(doc,new FileOutputStream(filename+".pdf"));
            
            
            doc.open();
      
            doc.add(new Paragraph("Report On Monthly Salaries of "+jobselectCombo.getItemAt(jobselectCombo.getSelectedIndex())));
            doc.add(new Paragraph("\n"));
            //PDF table
            PdfPTable p = new PdfPTable(6);             
            p.addCell("Job Type");   
            p.addCell("Name");
            p.addCell("ID");
            p.addCell("Hub");
            p.addCell("Date Joined");
            p.addCell("Salary");
            
             model= (DefaultTableModel) salaryTable.getModel();
           
            int totalSalary = 0;
            for(int i=0;i<model.getRowCount();i++){
                totalSalary = totalSalary + Integer.parseInt((String)model.getValueAt(i, 5));
                for(int j=0;j<model.getColumnCount()-1;j++){
                    p.addCell((String) model.getValueAt(i, j));
                }
            }
            PdfPCell salaryTitle = new PdfPCell(new Paragraph("Total Salary of"+jobselectCombo.getItemAt(jobselectCombo.getSelectedIndex())));
            salaryTitle.setColspan(3);
            salaryTitle.setHorizontalAlignment(Element.ALIGN_CENTER);
            salaryTitle.setBackgroundColor(BaseColor.YELLOW);
            p.addCell(salaryTitle);
            
         PdfPCell salaryInt = new PdfPCell(new Paragraph(Integer.toString(totalSalary)+"BDT"));
           salaryInt.setColspan(3);
            salaryInt.setHorizontalAlignment(Element.ALIGN_CENTER);
          salaryInt.setBackgroundColor(BaseColor.YELLOW);
           p.addCell(salaryInt);
            
            
            
            doc.add(p);
            doc.add(new Paragraph("Generated by"+username));
            doc.add(new Paragraph("Generated date:"+LocalDate.now().toString()));
            
            doc.close();
            writer.close();
            JOptionPane.showMessageDialog(null,"File created successfully");
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "+filename+".pdf");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void salaryTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_salaryTablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryTablePropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          int row = dm.getRowCount();
          for(int i = 0; i<row; i++)
          {
          dm.removeRow(dm.getRowCount()-1);
          }          

//AddHubAdmins
          li.HubAdmins();
          hAlist = li.return_hubAdmin();
          for(HubAdmin obj:hAlist)
          {
              dm.addRow(new Object[]{"Hub Admin", obj.getName(), obj.getID(), obj.getBranch(),obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
          //AddHubStaff
          li.HubStaff();
          hSlist = li.return_hubStaff();
          for(HubStaff obj:hSlist)
          {
              dm.addRow(new Object[]{"Hub Staff", obj.getName(), obj.getID(), obj.getBranch(),obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
          //AddLorryPilots
          li.LorryPilot();
          lPlist = li.return_lorry();
          for(LorryPilot obj:lPlist)
          {
              dm.addRow(new Object[]{"Lorry Pilot", obj.getName(),obj.getID() , obj.getBranch(),obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
          //AddAirCargoPilots
          li.airCargoPilot();
          aCPlist = li.return_pilot();
          for(AirCargoPilot obj:aCPlist)
          {
              dm.addRow(new Object[]{"AirCargoPilot", obj.getName(),obj.getID(), "Dhaka",obj.get_Jdate().toString(), Integer.toString(obj.getSalary())});
          }
           try{
            Document doc = new Document();
            
            String filename = "Salary Report on All Employees";
            System.out.println(filename);
            PdfWriter writer  = PdfWriter.getInstance(doc,new FileOutputStream(filename+".pdf"));
            
            doc.open();
            
           doc.add(new Paragraph("Report On Monthly Salaries of ALl Employees"));
            doc.add(new Paragraph("\n"));
            //PDF table
            PdfPTable p = new PdfPTable(6);             
            p.addCell("Job Type");   
            p.addCell("Name");
            p.addCell("ID");
            p.addCell("Hub");
            p.addCell("Date Joined");
            p.addCell("Salary");
            
            DefaultTableModel model= (DefaultTableModel) salaryTable.getModel();
           
            int totalSalary = 0;
            for(int i=0;i<model.getRowCount();i++){
                totalSalary = totalSalary + Integer.parseInt((String)model.getValueAt(i, 5));
                for(int j=0;j<model.getColumnCount();j++){
                    p.addCell((String) model.getValueAt(i, j));
                }
            }
            PdfPCell salaryTitle = new PdfPCell(new Paragraph("Total Salary"));
            salaryTitle.setColspan(3);
            salaryTitle.setHorizontalAlignment(Element.ALIGN_CENTER);
            salaryTitle.setBackgroundColor(BaseColor.YELLOW);
            p.addCell(salaryTitle);
            
         PdfPCell salaryInt = new PdfPCell(new Paragraph(Integer.toString(totalSalary)+"BDT"));
           salaryInt.setColspan(3);
            salaryInt.setHorizontalAlignment(Element.ALIGN_CENTER);
          salaryInt.setBackgroundColor(BaseColor.YELLOW);
           p.addCell(salaryInt);
            
            
            
            doc.add(p);
            doc.add(new Paragraph("Generated by "+username));
            doc.add(new Paragraph("Generated date "+LocalDate.now().toString()));
            
            doc.close();
            writer.close();
            JOptionPane.showMessageDialog(null,"File created successfully");
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "+filename+".pdf");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
          for(int i = 0; i<row; i++)
          {
          dm.removeRow(dm.getRowCount()-1);
          } 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
          for(int i = 0;i<dm.getRowCount();i++)
          {
              if(dm.getValueAt(i, 6).equals(true))
              {
                  dm.setValueAt(newSalary.getText(), i, 5);
              }
          }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void newSalaryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newSalaryKeyPressed
        int key = evt.getKeyCode();
        if(key>=evt.VK_0&&key<=evt.VK_9 || key>=evt.VK_NUMPAD0&&key<=evt.VK_NUMPAD9 || key==KeyEvent.VK_BACKSPACE)
        {
            newSalary.setEditable(true);
        }
        else
        {
            newSalary.setEditable(false);
        }
    }//GEN-LAST:event_newSalaryKeyPressed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
       // DefaultTableModel md =(DefaultTableModel) salaryTable.getModel();
        int highest = 0;
        int j = -1;
        for(int i = 0; i<model.getRowCount();i++){
            int g = (Integer)model.getValueAt(i, 5);
            if(g >highest){
                highest = g;
                j = i ;
            }
            else continue;
        }
        Document doc  = new Document();
        File s = new File("abc.pdf");
        try {
            PdfWriter pc = PdfWriter.getInstance(doc, new FileOutputStream(s));
            doc.add(new Paragraph("the highest salary is "+highest + " and the name of the employee is "+dm.getValueAt(j, 1)));
            doc.close();
            pc.close();
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler abc.pdf");
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(HubAdminSalaryCreatorFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(HubAdminSalaryCreatorFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HubAdminSalaryCreatorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed
   Loader li = new Loader();
   ArrayList<HubAdmin> hAlist = new ArrayList<>();
   ArrayList<HubStaff> hSlist = new ArrayList<>();
   ArrayList<LorryPilot> lPlist = new ArrayList<>();
   ArrayList<AirCargoPilot> aCPlist = new ArrayList<>();
   DefaultTableModel dm;
   String username;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jobselectCombo;
    private javax.swing.JTextField newSalary;
    private javax.swing.JTable salaryTable;
    // End of variables declaration//GEN-END:variables
}
