/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Classes.AirCargoPilot;
import Classes.HubAdmin;
import Classes.HubStaff;
import Classes.Loader;
import Classes.LorryPilot;
import Classes.Shipment;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ASUS
 */
public class ChartCreationFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form ChartCreationFrame
     */
    public ChartCreationFrame() {
        initComponents();
        comboBox.setEnabled(false);
        viewBtn.setEnabled(false);

        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        comboBox = new javax.swing.JComboBox<>();
        viewBtn = new javax.swing.JButton();
        chartPanel = new javax.swing.JPanel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ChartCreationPanel");
        setPreferredSize(new java.awt.Dimension(720, 480));

        jPanel1.setPreferredSize(new java.awt.Dimension(720, 480));
        jPanel1.setVerifyInputWhenFocusTarget(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButton1.setBackground(new java.awt.Color(51, 204, 0));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("TYPES OF SHIPMENT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 631;
        gridBagConstraints.ipady = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(51, 204, 0));
        jButton2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton2.setText("SHIPMENTS PER DIVISION");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 340;
        gridBagConstraints.ipady = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 129, 0, 0);
        jPanel1.add(jButton2, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(51, 204, 0));
        jButton3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton3.setText("EMPLOYEE SALARY");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 340;
        gridBagConstraints.ipady = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jButton3, gridBagConstraints);

        jPanel2.setPreferredSize(new java.awt.Dimension(720, 480));
        jPanel2.setVerifyInputWhenFocusTarget(false);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton5.setBackground(new java.awt.Color(51, 204, 0));
        jButton5.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton5.setText("Save to file");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5, new java.awt.GridBagConstraints());

        jPanel3.setPreferredSize(new java.awt.Dimension(720, 480));
        jPanel3.setVerifyInputWhenFocusTarget(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        comboBox.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 417;
        gridBagConstraints.ipady = 48;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 594, 2, 0);
        jPanel3.add(comboBox, gridBagConstraints);

        viewBtn.setText("View Chart");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 65;
        gridBagConstraints.ipady = 43;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 538, 0, 25);
        jPanel3.add(viewBtn, gridBagConstraints);

        chartPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(539, 539, 539)
                .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1804, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1804, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         choice = 1;
        comboBox.setEnabled(true);
        viewBtn.setEnabled(true);
        comboBox.removeAllItems();
        comboBox.addItem("Select");
        comboBox.addItem("DHAKA");
        comboBox.addItem("CHITTAGONG");
        comboBox.addItem("RAJSHAHI");
        comboBox.addItem("KHULNA");
        comboBox.addItem("BARISAL");
        comboBox.addItem("SYLHET");
        comboBox.addItem("RANGPUR");
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        choice = 2;
        comboBox.setEnabled(false);
        viewBtn.setEnabled(false);
        li.HubAdmins();
        li.HubStaff();
        li.LorryPilot();
        li.airCargoPilot();
        hAlist = li.return_hubAdmin();
        hSlist = li.return_hubStaff();
        lPlist = li.return_lorry();
        aCPlist = li.return_pilot();
        int hubadmin = 0, hubstaff = 0, lorryP = 0, airCargo = 0;
        
        for(HubAdmin obj: hAlist)
        {
            hubadmin = hubadmin + obj.getSalary();
        }
        
        for(HubStaff obj : hSlist)
        {
            hubstaff = hubstaff+obj.getSalary();
        }
        
        for(LorryPilot obj: lPlist)
        {
            lorryP = lorryP+obj.getSalary();
        }
        
        for(AirCargoPilot obj : aCPlist)
        {
            airCargo = airCargo + obj.getSalary();
        }
        
           
           
        DefaultCategoryDataset bardataset = new DefaultCategoryDataset();
        bardataset.setValue(hubadmin, "HubAdmin", "HubAdmin");
        bardataset.setValue(hubstaff, "Hub Staff", "Hub Staff");
        bardataset.setValue(lorryP, "Lorry Pilot", "Lorry Pilot");
        bardataset.setValue(airCargo, "AirCargoPilot", "AirCargoPilot");
        
       
         barchart = ChartFactory.createBarChart3D(  
            "Emplyee Salary Distribution",   //title
            "Employee Category",    // x axis         
            "Salary(TK)",   // y axis           
            bardataset,             
            PlotOrientation.VERTICAL,      
            false,                
            true,                
            false               
        );  
       
        barchart.getTitle().setPaint(Color.black);  
        barchart.setBackgroundPaint(Color.WHITE);
    
        // Set the background colour of the chart  
        CategoryPlot cp = barchart.getCategoryPlot(); 
        cp.setBackgroundPaint(Color.white);       
        cp.setRangeGridlinePaint(Color.blue); // Set the colour of the plot gridlines  
        ChartPanel frame= new ChartPanel(barchart); 

        BarRenderer r = (BarRenderer)barchart.getCategoryPlot().getRenderer();
        r.setSeriesPaint(0, Color.orange);
     
        chartPanel.removeAll();
        chartPanel.add(frame,BorderLayout.CENTER);
        chartPanel.validate();
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         choice = 3;
        comboBox.setEnabled(false);
        viewBtn.setEnabled(false);
        
        int Electronics = 0, Glass = 0,  Watch = 0, Phone = 0 ,Documents = 0, Dvd = 0, Fruits= 0, Food =0, Other =0;
           
            li.Shipment();
            
            sHlist = li.return_shipment();
         
           for(Shipment obj : sHlist)
           {
                   if(obj.get_shipmentType().equals("Electronics"))
                   {
                      Electronics++;
                   }
                   else if(obj.get_shipmentType().equals("Glass"))
                   {
                       Glass++;
                   }
                   else if(obj.get_shipmentType().equals("Watch"))
                   {
                       Watch++;
                   }
                   else if(obj.get_shipmentType().equals("Phone"))
                   {
                       Phone++;
                   }
                   else if(obj.get_shipmentType().equals("Documents"))
                   {
                       Documents++;
                   }
                   else if(obj.get_shipmentType().equals("Dvd"))
                   {
                       Dvd++;
                   }
                   else if(obj.get_shipmentType().equals("Fruits"))
                   {
                      Fruits++; 
                   }
                   else if(obj.get_shipmentType().equals("Food"))
                   {
                      Food++; 
                   }
                   else if(obj.get_shipmentType().equals("Other"))
                   {
                      Other++; 
                   }
           }
           
           System.out.println(Electronics);
           
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();  
        dataset.setValue(Electronics,"" ,"Electronics" );
        dataset.setValue(Glass,"" ,"Glass" );
        dataset.setValue(Watch,"" ,"Watch" );
        dataset.setValue(Phone,"" ,"Phone" );
        dataset.setValue(Documents,"" ,"Documents" );
        dataset.setValue(Dvd,"" ,"Dvd" ); 
        dataset.setValue(Fruits,"" ,"Fruits" );
        dataset.setValue(Food,"" ,"Food" );
        dataset.setValue(Other,"" ,"Other" );
        
     
         lineChart = ChartFactory.createLineChart(  
            "Graph for all types of Packages Shipped",  // Title  
            "Package Type",             // X-axis Label  
            "Number",             //y 
            dataset,             
            PlotOrientation.VERTICAL,        
            false,                 
            true,                
            false                    
        ); 
        lineChart.getTitle().setPaint(Color.black);     
        lineChart.setBackgroundPaint(Color.WHITE);
    
        CategoryPlot cp = lineChart.getCategoryPlot(); 
        cp.setBackgroundPaint(Color.white);       
        cp.setRangeGridlinePaint(Color.blue);      
        ChartPanel cPanel= new ChartPanel(lineChart); 
        
        chartPanel.removeAll();
        chartPanel.add(cPanel,BorderLayout.CENTER);
        chartPanel.validate();  
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser = new JFileChooser();
        if(chooser.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
             Document doc = new Document();
        try {
            File file = chooser.getSelectedFile();
            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(file.getAbsolutePath()+".pdf"));
            
            doc.open();
            
            if(choice == 1)
            {
            doc.add(new Paragraph("PieChart on Shipments from "+selected,FontFactory.getFont(FontFactory.TIMES_BOLD, 20, 20, BaseColor.YELLOW)));                  
            doc.add(new Paragraph("\n\n"));
            //add chart to PDF
            BufferedImage bufImg = piechart.createBufferedImage(400, 400);
            Image chartImage = Image.getInstance(writer,bufImg,1.0f);
            doc.add(chartImage);
            doc.close();//close doc file
            JOptionPane.showMessageDialog(null,"Report Saved");
            }
            else if (choice == 2)
            {
            doc.add(new Paragraph("Barchart On All Employees",FontFactory.getFont(FontFactory.TIMES_BOLD, 20, 20, BaseColor.YELLOW)));                  
            doc.add(new Paragraph("\n\n"));
            //add chart to PDF
            BufferedImage bufImg = barchart.createBufferedImage(400, 400);
            Image chartImage = Image.getInstance(writer,bufImg,1.0f);
            doc.add(chartImage);
            doc.close();//close doc file
            JOptionPane.showMessageDialog(null,"Report Saved");
            }
            else if(choice == 3)
            {
            doc.add(new Paragraph("LineChart On All Types of Packages",FontFactory.getFont(FontFactory.TIMES_BOLD, 20, 20, BaseColor.YELLOW)));                  
            doc.add(new Paragraph("\n\n"));
            //add chart to PDF
            BufferedImage bufImg = lineChart.createBufferedImage(400, 400);
            Image chartImage = Image.getInstance(writer,bufImg,1.0f);
            doc.add(chartImage);
            doc.close();//close doc file
            JOptionPane.showMessageDialog(null,"Report Saved");  
            }
        } 
        catch (FileNotFoundException ex){} 
        catch (DocumentException ex){} 
        catch (IOException ex){}
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        if(choice ==1 )
       {
            selected = comboBox.getItemAt(comboBox.getSelectedIndex());
            int DHAKA = 0, CHITTAGONG = 0,  RAJSHAHI = 0, KHULNA = 0 ,BARISAL = 0, SYLHET = 0, RANGPUR= 0;
            li.Shipment();
            sHlist = li.return_shipment();
            
           for(Shipment obj : sHlist)
           {
               if(obj.get_pickup().equals(selected))
               {
                   if(obj.get_destination().equals("DHAKA"))
                   {
                      DHAKA++;
                   }
                   else if(obj.get_destination().equals("CHITTAGONG"))
                   {
                       CHITTAGONG++;
                   }
                   else if(obj.get_destination().equals("RAJSHAHI"))
                   {
                       RAJSHAHI++;
                   }
                   else if(obj.get_destination().equals("KHULNA"))
                   {
                       KHULNA++;
                   }
                   else if(obj.get_destination().equals("BARISAL"))
                   {
                       BARISAL++;
                   }
                   else if(obj.get_destination().equals("SYLHET"))
                   {
                       SYLHET++;
                   }
                   else if(obj.get_destination().equals("RANGPUR"))
                   {
                      RANGPUR++; 
                   }
               }
           }
           
        
           
        DefaultPieDataset piedataset = new DefaultPieDataset();  
        piedataset.setValue("Dhaka", new Integer(DHAKA));  
        piedataset.setValue("Chittagong", new Integer(CHITTAGONG)); 
        piedataset.setValue("Rajshahi", new Integer(RAJSHAHI));  
        piedataset.setValue("Khulna", new Integer(KHULNA));  
        piedataset.setValue("Barisal", new Integer(BARISAL));
        piedataset.setValue("Sylhet", new Integer(SYLHET));
        piedataset.setValue("Rangpur", new Integer(RANGPUR));
        
       
        piechart = ChartFactory.createPieChart(  
            "PieChart on the Number of Shipments from "+selected,   // Title  
            piedataset,  //dataset           
            true,    //legends              
            true,    //tools               
            true    //urls                
        );  
       
        piechart.getTitle().setPaint(Color.BLACK); // Set the colour of the title  
      
        PiePlot p=(PiePlot)piechart.getPlot();
        p.setBackgroundPaint(Color.white);        
      
        ChartPanel cPanel= new ChartPanel(piechart);
        chartPanel.removeAll();
        chartPanel.add(cPanel,BorderLayout.CENTER);
        chartPanel.validate();
           
           
           //end of if
       }
       else if (choice == 3)
       {
             
       }
    }//GEN-LAST:event_viewBtnActionPerformed
    int choice = 0;
    Loader li = new Loader();
    ArrayList<Shipment> sHlist = new ArrayList<>();
    ArrayList<HubAdmin> hAlist = new ArrayList<>();
    ArrayList<HubStaff> hSlist = new ArrayList<>();
    ArrayList<LorryPilot> lPlist = new ArrayList<>();
    ArrayList<AirCargoPilot> aCPlist = new ArrayList<>();
    JFreeChart piechart;
    JFreeChart barchart;
    JFreeChart lineChart;
    String selected;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
