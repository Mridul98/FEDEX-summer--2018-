/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Classes.HubAdmin;
import Classes.HubStaff;
import Classes.Loader;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author smart view
 */
public class StaffCreatorPanel extends javax.swing.JInternalFrame {

    /**
     * Creates new form ownerHubAdminCreatorPanel
     */
    public StaffCreatorPanel(int i) {
        initComponents();
        selector = i;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fName = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        addrLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        fullNameField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        passField = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        mobileNumberField = new javax.swing.JTextField();
        mobileLabel = new javax.swing.JLabel();
        branchCombo = new javax.swing.JComboBox<>();
        branchLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        genderCombo = new javax.swing.JComboBox<>();
        dobLabel = new javax.swing.JLabel();
        yearCombo = new javax.swing.JComboBox<>();
        monthCombo = new javax.swing.JComboBox<>();
        dayCombo = new javax.swing.JComboBox<>();
        rPassLabel = new javax.swing.JLabel();
        retypePassField = new javax.swing.JPasswordField();
        jLabel13 = new javax.swing.JLabel();
        securityQCombo = new javax.swing.JComboBox<>();
        securityAnsField = new javax.swing.JTextField();
        answerLabel = new javax.swing.JLabel();
        divLabel = new javax.swing.JLabel();
        divField = new javax.swing.JTextField();
        zipLabel = new javax.swing.JLabel();
        zipField = new javax.swing.JTextField();
        shiftCombo = new javax.swing.JComboBox<>();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Hub Admin Creator");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        fName.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        fName.setText("Full Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 62;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(134, 106, 0, 0);
        getContentPane().add(fName, gridBagConstraints);

        emailLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        emailLabel.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 106, 0, 0);
        getContentPane().add(emailLabel, gridBagConstraints);

        addrLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        addrLabel.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 106, 0, 0);
        getContentPane().add(addrLabel, gridBagConstraints);

        passLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        passLabel.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 105, 0, 0);
        getContentPane().add(passLabel, gridBagConstraints);

        fullNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullNameFieldActionPerformed(evt);
            }
        });
        fullNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fullNameFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(134, 4, 0, 0);
        getContentPane().add(fullNameField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        getContentPane().add(addressField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 0, 0);
        getContentPane().add(emailField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 0);
        getContentPane().add(passField, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(0, 153, 102));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.ipadx = 779;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(42, 119, 16, 109);
        getContentPane().add(jButton1, gridBagConstraints);

        mobileNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileNumberFieldActionPerformed(evt);
            }
        });
        mobileNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobileNumberFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 4, 0, 0);
        getContentPane().add(mobileNumberField, gridBagConstraints);

        mobileLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        mobileLabel.setText("Mobile Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 105, 0, 0);
        getContentPane().add(mobileLabel, gridBagConstraints);

        branchCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        branchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SelectHub", "DHAKA", "CHITTAGONG", "RAJSHAHI", "KHULNA", "BARISAL", "SYLHET", "RANGPUR" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 144;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        getContentPane().add(branchCombo, gridBagConstraints);

        branchLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        branchLabel.setText("Hub Location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 26, 0, 0);
        getContentPane().add(branchLabel, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel8.setText("Working Shift");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 26, 0, 0);
        getContentPane().add(jLabel8, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel11.setText("Gender:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 67;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 105, 0, 0);
        getContentPane().add(jLabel11, gridBagConstraints);

        genderCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        genderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gender", "Male", "Female", "Other" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 182;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        getContentPane().add(genderCombo, gridBagConstraints);

        dobLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        dobLabel.setText("Date of Birth:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 26, 0, 0);
        getContentPane().add(dobLabel, gridBagConstraints);

        yearCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "1930", "1931", "1932", "1933", "1934", "1935", "1936", "1937", "1938", "1939", "1940", "1941", "1942", "1943", "1944", "1945", "1946", "1947", "1948", "1949", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 0);
        getContentPane().add(yearCombo, gridBagConstraints);

        monthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthComboFocusLost(evt);
            }
        });
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(19, 18, 0, 0);
        getContentPane().add(monthCombo, gridBagConstraints);

        dayCombo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dayCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));
        dayCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dayCombo.setOpaque(false);
        dayCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayComboFocusGained(evt);
            }
        });
        dayCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 0);
        getContentPane().add(dayCombo, gridBagConstraints);

        rPassLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        rPassLabel.setText("Re-Type Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 105, 0, 0);
        getContentPane().add(rPassLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 3, 0, 0);
        getContentPane().add(retypePassField, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel13.setText("Security Question:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(134, 26, 0, 0);
        getContentPane().add(jLabel13, gridBagConstraints);

        securityQCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        securityQCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "What is your pets name?", "What is the password of your cellphone?", "Do you trust yourself?" }));
        securityQCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityQComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = -36;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(134, 11, 0, 109);
        getContentPane().add(securityQCombo, gridBagConstraints);

        securityAnsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityAnsFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = 281;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 11, 0, 109);
        getContentPane().add(securityAnsField, gridBagConstraints);

        answerLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        answerLabel.setText("Your Answer:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 26, 0, 0);
        getContentPane().add(answerLabel, gridBagConstraints);

        divLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        divLabel.setText("Division:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 105, 0, 0);
        getContentPane().add(divLabel, gridBagConstraints);

        divField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                divFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 262;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 3, 0, 0);
        getContentPane().add(divField, gridBagConstraints);

        zipLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        zipLabel.setText("Zip Code:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 48;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 26, 0, 0);
        getContentPane().add(zipLabel, gridBagConstraints);

        zipField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                zipFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 264;
        gridBagConstraints.ipady = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 10, 0, 0);
        getContentPane().add(zipField, gridBagConstraints);

        shiftCombo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        shiftCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Shift", "06:00 - 11:59", "12:00 - 17:59", "18:00 - 23:59", "00:00 - 05:59" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 137;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 10, 0, 0);
        getContentPane().add(shiftCombo, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mobileNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileNumberFieldActionPerformed

    private void fullNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fullNameFieldKeyPressed
       int key = evt.getKeyCode();
        if((key>=evt.VK_A && key<=evt.VK_Z) || key==evt.VK_PERIOD || key==evt.VK_SPACE || key==evt.VK_BACK_SPACE || key==evt.VK_QUOTE)
        {
            fullNameField.setEditable(true);
        }
        else
        {
            fullNameField.setEditable(false);
        }
    }//GEN-LAST:event_fullNameFieldKeyPressed

    private void monthComboFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthComboFocusLost

    }//GEN-LAST:event_monthComboFocusLost

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed

    }//GEN-LAST:event_monthComboActionPerformed

    private void dayComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayComboFocusGained
        int month = monthCombo.getSelectedIndex();
        dayCombo.removeAllItems();
        dayCombo.addItem("Day");
        if(month == 1 || month == 3 || month==5 || month==7 || month==8 || month==10 || month==12 )
        {
            for(int i =1; i<=31; i++)
            {
                if(i<10)
                {
                dayCombo.addItem("0"+Integer.toString(i));
                }
                else
                {
                 dayCombo.addItem(Integer.toString(i));
                }
            }
        }
        else if(month==4 || month==6 || month ==9 || month==11)
        {
            for(int i =1; i<=30; i++)
            {
              if(i<10)
                {
                dayCombo.addItem("0"+Integer.toString(i));
                }
                else
                {
                 dayCombo.addItem(Integer.toString(i));
                }
            }
        }
        else if(month==2)
        {
            int year = Integer.parseInt(yearCombo.getItemAt(yearCombo.getSelectedIndex()));
            if((year%4==0 && year%100!=0) || (year%100==0 && year%400==0))
            {
                for(int i =1; i<=29; i++)
                {
                   if(i<10)
                {
                dayCombo.addItem("0"+Integer.toString(i));
                }
                else
                {
                 dayCombo.addItem(Integer.toString(i));
                }
                }
            }
            else
            {
                for(int i =1; i<=28; i++)
                {
                if(i<10)
                {
                dayCombo.addItem("0"+Integer.toString(i));
                }
                else
                {
                 dayCombo.addItem(Integer.toString(i));
                }
                }
            }
        }
    }//GEN-LAST:event_dayComboFocusGained

    private void dayComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayComboActionPerformed

    }//GEN-LAST:event_dayComboActionPerformed

    private void securityAnsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityAnsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_securityAnsFieldActionPerformed

    private void securityQComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityQComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_securityQComboActionPerformed

    private void zipFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zipFieldKeyPressed
      int key = evt.getKeyCode();
        if(key>=evt.VK_0&&key<=evt.VK_9 || key>=evt.VK_NUMPAD0&&key<=evt.VK_NUMPAD9 || key==KeyEvent.VK_BACKSPACE)
        {
            zipField.setEditable(true);
        }
        else
        {
            zipField.setEditable(false);
        }
    }//GEN-LAST:event_zipFieldKeyPressed

    private void fullNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullNameFieldActionPerformed
    
     public void start_hubAdmin()
     {
        SwingWorker<Boolean,Void> worker = new SwingWorker<Boolean,Void>(){
            @Override
            public Boolean doInBackground() throws Exception{
                String fileName="HubAdmin.bin";
               File file = new File (fileName);
                ObjectOutputStream out = null;
                 boolean append=true;
                    try{
                        if (!file.exists () || !append) out =
                            new ObjectOutputStream (new FileOutputStream (fileName));
                        else out = 
                            new AppendableObjectOutputStream (new FileOutputStream (fileName, append));
                        out.writeObject(hA);
                        out.flush ();
                    }catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
        }
                    //Get properties object    
          Properties props = new Properties();    
          props.put("mail.smtp.host", "smtp.gmail.com");    
          props.put("mail.smtp.socketFactory.port", "465");    
          props.put("mail.smtp.socketFactory.class",    
                    "javax.net.ssl.SSLSocketFactory");    
          props.put("mail.smtp.auth", "true");    
          props.put("mail.smtp.port", "465");    
          //get Session   
          Session session = Session.getDefaultInstance(props,    
           new javax.mail.Authenticator() {    
           protected PasswordAuthentication getPasswordAuthentication() {    
           return new PasswordAuthentication("rapidoteam2018@gmail.com","7951384620");  
           }    
          });    
          //compose message    
          try {    
           MimeMessage message = new MimeMessage(session);    
           message.addRecipient(Message.RecipientType.TO,new InternetAddress(emailField.getText()));    
           message.setSubject("Confirmation of Account Creation");    
           message.setText("Dear Mr"+fullNameField.getText()+",\n\nWelcome to the Rapidoo Team. Your ID is: "+id+".\n\nWe look to working with you. \n\n Your's Sincerely, \n\n Rapido Team");    
           //send message  
           Transport.send(message);   
          } catch (MessagingException e) {throw new RuntimeException(e);}
                return true;
            }

           
        };
        worker.execute(); 
     }
     
     public void start_hubStaff()
     {
        SwingWorker<Boolean,Object[]> worker = new SwingWorker<Boolean,Object[]>(){
            @Override
            public Boolean doInBackground() throws Exception{
                String fileName="HubStaff.bin";
               File file = new File (fileName);
                ObjectOutputStream out = null;
                 boolean append=true;
                    try{
                        if (!file.exists () || !append) out =
                            new ObjectOutputStream (new FileOutputStream (fileName));
                        else out = 
                            new AppendableObjectOutputStream (new FileOutputStream (fileName, append));
                        out.writeObject(hS);
                        out.flush ();
                    }catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
        }
             //Get properties object    
          Properties props = new Properties();    
          props.put("mail.smtp.host", "smtp.gmail.com");    
          props.put("mail.smtp.socketFactory.port", "465");    
          props.put("mail.smtp.socketFactory.class",    
                    "javax.net.ssl.SSLSocketFactory");    
          props.put("mail.smtp.auth", "true");    
          props.put("mail.smtp.port", "465");    
          //get Session   
          Session session = Session.getDefaultInstance(props,    
           new javax.mail.Authenticator() {    
           protected PasswordAuthentication getPasswordAuthentication() {    
           return new PasswordAuthentication("rapidoteam2018@gmail.com","7951384620");  
           }    
          });    
          //compose message    
          try {    
           MimeMessage message = new MimeMessage(session);    
           message.addRecipient(Message.RecipientType.TO,new InternetAddress(emailField.getText()));    
           message.setSubject("Confirmation of Account Creation");    
           message.setText("Dear Mr"+fullNameField.getText()+",\n\nWelcome to the Rapidoo Team. Your ID is: "+id+".\n\nWe look to working with you. \n\n Your's Sincerely, \n\n Rapido Team");    
           //send message  
           Transport.send(message);   
          } catch (MessagingException e) {throw new RuntimeException(e);}
                return true;
            }

            @Override
            public void process(List<Object[]> obj){
               // result.setText(result.getText()+"No of Student of "+obj.get(0)[0].toString()+" Dept: "+Integer.parseInt(obj.get(0)[1].toString())+"\n");
            }
            
            @Override
            public void done() {
                boolean done=false;
                try {
                    done = get();
                } catch(Exception ex) {
                    ex.printStackTrace();
                }
                if(done){
                    //statusLabel.setText("Text Files are created successfully");
                }else{
                    //statusLabel.setText("Text Files creation Failed");
                }
            }
        };
        worker.execute(); 
     }
    
    class AppendableObjectOutputStream extends ObjectOutputStream {
       public AppendableObjectOutputStream(OutputStream out) throws IOException {
        super(out);
    }
  @Override
    protected void writeStreamHeader() throws IOException {}
    
  }
    
    
    boolean passCheck(char[] pass)
    {
        boolean foundUpper = false, foundLower = false, foundAlpha = false;
        
        if(pass.length<8)
        {
            return false;
        }
        
        for(int i = 0; i<pass.length; i++)        
        {
            if(Character.isAlphabetic(pass[i]))
            {
                foundAlpha = true;
                if(Character.isUpperCase(pass[i]))
                {
                    foundUpper = true;
                }
                else
                {
                    foundLower = true;
                }
            }
        }
        if(foundUpper == true && foundLower == true && foundAlpha == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       //id
      String prev_id;
      //checkbools
      boolean hub = false ,name = false, em = false, addr = false, zipCode = false, division = false, dob = false, pass = false, rpass = false, answer = false, gender = false, mobile = false, shift = false, salary = false;
      //loadArrays
      if(selector == 1)
      {
      li.HubAdmins();
      hAlist = li.return_hubAdmin();
      }
      else if (selector == 2)
      {
      li.HubStaff();
      hSlist = li.return_hubStaff();
      }
      
      li.loadAllEmails(); 
      emailList = li.return_AllEmails();
      
      //namecheck
      if(fullNameField.getText().equals(""))
      {
          fName.setForeground(Color.red);
          fullNameField.requestFocus();
      }
      else
      {
          name = true;
          fName.setForeground(Color.black);
      }
      //emailFieldCheck
      if(emailField.getText().equals(""))
      {
          emailLabel.setForeground(Color.red);
          emailField.requestFocus();
      }
      else
      {
          em = true;
          emailLabel.setForeground(Color.black);
      }
      //emailExistCheck
      if(!emailList.isEmpty())
      {
          for(String emails : emailList)
          {
              if(emailField.getText().equals(emails))
              {
                  emailField.setForeground(Color.red);
                  em = false;
                  emailField.requestFocus();
                  break;
              }
          }
      }
      //addressCheck
      if(addressField.getText().equals(""))
      {
          addrLabel.setForeground(Color.red);
          addressField.requestFocus();
      }
      else
      {
          addr = true;
          addrLabel.setForeground(Color.black);
      }
      //zipCheck
      if(zipField.getText().equals(""))
      {
          zipLabel.setForeground(Color.red);
          zipField.requestFocus();
      }
      else
      {
          zipCode = true;
          zipLabel.setForeground(Color.black);
      }
      //divisionCheck
      if(divField.getText().equals(""))
      {
          divLabel.setForeground(Color.red);
          divField.requestFocus();
      }
      else
      {
          division = true;
          divLabel.setForeground(Color.black);
      }
      //dobCheck 
      if(dayCombo.getSelectedIndex() ==0 && monthCombo.getSelectedIndex() ==0 && yearCombo.getSelectedIndex() == 0)
      {
          dobLabel.setForeground(Color.red);
      }
          if(dayCombo.getSelectedIndex() ==0)
          {
              dayCombo.requestFocus();
          }
          
          if(monthCombo.getSelectedIndex()==0)
          {
              monthCombo.requestFocus();
          }
        
          
          if(yearCombo.getSelectedIndex() ==0)
          {
              yearCombo.requestFocus();
          }

       if(dayCombo.getSelectedIndex() >0 && monthCombo.getSelectedIndex() >0 && yearCombo.getSelectedIndex() > 0)
      {
          dobLabel.setForeground(Color.black);
          dob = true;
      }
      //passCheck
      if(passField.getPassword().length == 0 || passCheck(passField.getPassword()) == false)
      {
          passLabel.setForeground(Color.red);
          passField.requestFocus();
          
      }
      else
      {
          passLabel.setForeground(Color.black);
          pass = true;
      }
      //RtypePassCheck
      if(!(Arrays.toString(retypePassField.getPassword()).equals(Arrays.toString(passField.getPassword()))) || retypePassField.getPassword().length == 0)
      {
          rPassLabel.setForeground(Color.red);
          retypePassField.requestFocus();
      }
      else
      {
          rPassLabel.setForeground(Color.black);
          rpass = true;  
      }
      //checkAnswer
      if(securityAnsField.getText().equals(""))
      {
          answerLabel.setForeground(Color.red);
          securityAnsField.requestFocus();
      }
      else
      {
         answerLabel.setForeground(Color.black);
          answer = true;
      }
      //checkGender
      if(genderCombo.getSelectedIndex() == 0)
      {
         genderCombo.requestFocus();
      }
      else
      {
         gender = true; 
      }
      //checkMobile
      if(mobileNumberField.getText().equals(""))
      {
          mobileLabel.setForeground(Color.red);
          mobileLabel.requestFocus();
      }
      else if(mobileNumberField.getText().length()!=11)
      {
          mobileLabel.setForeground(Color.red);
          mobileLabel.requestFocus();
      }
      else
      {
          mobileLabel.setForeground(Color.black);
          mobile = true;
      }
      //shiftCheck
      if(shiftCombo.getSelectedIndex() ==0)
      {
          shiftCombo.requestFocus();
      }
      else
      {
          shift = true;
      }
       //checkHub
       if(branchCombo.getSelectedIndex() ==0)
       {
           branchLabel.setForeground(Color.red);
           branchCombo.requestFocus();
       }
       else
       {
            branchLabel.setForeground(Color.black);
            hub = true;
       }
      //createHubAdminAccount
      if(name == true && em == true && addr == true && zipCode == true && division == true && dob == true && pass == true && rpass == true && answer == true && gender == true && mobile == true && shift == true && hub == true)
      {
          String d = ""; 
          LocalDate date;
          d = d + yearCombo.getItemAt(yearCombo.getSelectedIndex())+"-";
          d = d + monthCombo.getItemAt(monthCombo.getSelectedIndex()) +"-";
          d = d + dayCombo.getItemAt(dayCombo.getSelectedIndex());
          
          LocalTime start = LocalTime.parse("00:00");
          LocalTime end = LocalTime.parse("00:00");
          
          if(shiftCombo.getSelectedIndex() == 1)
          {
              start = LocalTime.parse("06:00");
              end = LocalTime.parse("11:59");
          }
          else if(shiftCombo.getSelectedIndex() == 2)
          {
              start = LocalTime.parse("12:00");
              end = LocalTime.parse("17:59");
          }
          else if(shiftCombo.getSelectedIndex() == 3)
          {
              start = LocalTime.parse("18:00");
              end = LocalTime.parse("23:59");
          }
          else if(shiftCombo.getSelectedIndex() == 4)
          {
              start = LocalTime.parse("00:00");
              end = LocalTime.parse("05:59");
          }
          System.out.println(end);
          date = LocalDate.parse(d);
          if(selector ==1)
          {
                if(hAlist.isEmpty())
                {
                    id = "FEDEXHA0";
                }
                else
                {
                    prev_id = hAlist.get(hAlist.size()-1).getID();
                    String[] split = prev_id.split("HA");
                    int number = Integer.parseInt(split[1]);
                    number++;
                    id = "FEDEXHA"+number;
                }
                hA = new HubAdmin();
                hA.createHubAdmin(id, fullNameField.getText(), mobileNumberField.getText(), addressField.getText(), divField.getText(), emailField.getText(), Integer.parseInt(zipField.getText()), String.valueOf(passField.getPassword()), securityQCombo.getItemAt(securityQCombo.getSelectedIndex()), securityAnsField.getText(), genderCombo.getItemAt(genderCombo.getSelectedIndex()), date, branchCombo.getItemAt(branchCombo.getSelectedIndex()), start, end, 30000);
                start_hubAdmin();
                JOptionPane.showMessageDialog(null, "New Hub Admin Account Created \n Your Login ID has been sent to your Email.", "Success", JOptionPane.INFORMATION_MESSAGE);
          }
          else if (selector == 2)
          {
                if(hSlist.isEmpty())
                {
                    id = "FEDEXHS0";
                }
                else
                {
                    prev_id = hSlist.get(hSlist.size()-1).getID();
                    String[] split = prev_id.split("HS");
                    int number = Integer.parseInt(split[1]);
                    number++;
                    id = "FEDEXHS"+number;
                }
                hS = new HubStaff();
                hS.createHubStaff(id, fullNameField.getText(), mobileNumberField.getText(), addressField.getText(), divField.getText(), emailField.getText(), Integer.parseInt(zipField.getText()), String.valueOf(passField.getPassword()), securityQCombo.getItemAt(securityQCombo.getSelectedIndex()), securityAnsField.getText(), genderCombo.getItemAt(genderCombo.getSelectedIndex()), date, branchCombo.getItemAt(branchCombo.getSelectedIndex()), start, end, 20000);
                start_hubStaff();
                JOptionPane.showMessageDialog(null, "New Hub Staff Account Created, \n Your Login ID has been sent to your Email", "Success", JOptionPane.INFORMATION_MESSAGE);
          }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void divFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_divFieldKeyPressed
         int key = evt.getKeyCode();
        if((key>=evt.VK_A && key<=evt.VK_Z) || key==evt.VK_BACK_SPACE )
        {
           divField.setEditable(true);
        }
        else
        {
            divField.setEditable(false);
        }
    }//GEN-LAST:event_divFieldKeyPressed

    private void mobileNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileNumberFieldKeyPressed
        int key = evt.getKeyCode();
        if(key==evt.VK_BACK_SPACE || ((key>=evt.VK_0&&key<=evt.VK_9)) || (key>=evt.VK_NUMPAD0&&key<=evt.VK_NUMPAD9))
        {
            mobileNumberField.setEditable(true);
        }
        else
        {
            mobileNumberField.setEditable(false);
        }
    }//GEN-LAST:event_mobileNumberFieldKeyPressed
Loader li = new Loader();
HubAdmin hA;
HubStaff hS;
ArrayList<HubStaff> hSlist = new ArrayList<>();
ArrayList<HubAdmin> hAlist = new ArrayList<>();
ArrayList<String> emailList = new ArrayList<>();
int selector = 0;
 String id;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addrLabel;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JComboBox<String> branchCombo;
    private javax.swing.JLabel branchLabel;
    private javax.swing.JComboBox<String> dayCombo;
    private javax.swing.JTextField divField;
    private javax.swing.JLabel divLabel;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel fName;
    private javax.swing.JTextField fullNameField;
    private javax.swing.JComboBox<String> genderCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField mobileNumberField;
    private javax.swing.JComboBox<String> monthCombo;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel passLabel;
    private javax.swing.JLabel rPassLabel;
    private javax.swing.JPasswordField retypePassField;
    private javax.swing.JTextField securityAnsField;
    private javax.swing.JComboBox<String> securityQCombo;
    private javax.swing.JComboBox<String> shiftCombo;
    private javax.swing.JComboBox<String> yearCombo;
    private javax.swing.JTextField zipField;
    private javax.swing.JLabel zipLabel;
    // End of variables declaration//GEN-END:variables
}
