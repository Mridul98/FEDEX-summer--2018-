/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Classes.BusinessCustomer;
import Classes.HubStaff;
import Classes.Loader;
import Classes.PersonalCustomer;
import Classes.Shipment;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author smart view
 */
public class ShipmentProcessPanel extends javax.swing.JPanel {

    /**
     * Creates new form ShipmentProcessPanel
     */
    static String username;
    public ShipmentProcessPanel(String id) {
         initComponents();
        username = id;
        li.Shipment();
        li.HubStaff();
        li.BusinessCustomer();
        li.PersonalCustomer();
        pClist = li.return_personal();
        bClist = li.return_business();
        hSlist = li.return_hubStaff();
        sHlist = li.return_shipment();
        for(HubStaff obj: hSlist)
        {
            if(obj.getID().equals(username))
            {
                division = obj.getBranch();
            }
        }
        
        dm = (DefaultTableModel) shipTable.getModel();
        
        for(Shipment obj: sHlist)
        {
         if(obj.get_destination().equals(division) && obj.get_deliveryStatus().equals("In Progress"))
         {
             dm.addRow(new Object[]{obj.get_shipmentType(), obj.get_ownerID(), obj.get_trackID(), false});
         }
        }
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        shipTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        shipTable.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        shipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Shipment Type", "Shipment Owner", "Shipment TrackID", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(shipTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 657;
        gridBagConstraints.ipady = 81;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(0, 153, 51));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("Process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 589;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 24, 0);
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
     public void sendEmail(String x, String y)
     {
        SwingWorker<Boolean,Void> worker = new SwingWorker<Boolean,Void>(){
            @Override
            public Boolean doInBackground() throws Exception{
                 //Get properties object    
          Properties props = new Properties();    
          props.put("mail.smtp.host", "smtp.gmail.com");    
          props.put("mail.smtp.socketFactory.port", "465");    
          props.put("mail.smtp.socketFactory.class",    
                    "javax.net.ssl.SSLSocketFactory");    
          props.put("mail.smtp.auth", "true");    
          props.put("mail.smtp.port", "465");    
          //get Session   
          Session session = Session.getDefaultInstance(props,    
           new javax.mail.Authenticator() {    
           protected PasswordAuthentication getPasswordAuthentication() {    
           return new PasswordAuthentication("rapidoteam2018@gmail.com","7951384620");  
           }    
          });    
          //compose message    
          try {    
           MimeMessage message = new MimeMessage(session);    
           message.addRecipient(Message.RecipientType.TO,new InternetAddress(x));    
           message.setSubject("Confirmation of Delivery");    
           message.setText("Dear Sir,\n\nWe are glad to infom you that your shipment, ID: "+y+" has arrived to its destination and is ready for pickup. \n\nThankyou for using our services. \n\n Your's Sincerely, \n\n Rapido Team");    
           //send message  
           Transport.send(message);   
          } catch (MessagingException e) {throw new RuntimeException(e);} 
                return true;
                }
               
              
        };
        worker.execute(); 
} 
    
    public void start_Update()
     {
        SwingWorker<Boolean,Void> worker = new SwingWorker<Boolean,Void>(){
            @Override
            public Boolean doInBackground() throws Exception{
                {
                   String fileName = "Shipment.bin";
                      File file = new File (fileName);
                      ObjectOutputStream out = null;
                    try{
                       out = new ObjectOutputStream (new FileOutputStream (fileName, false));
                       for(Shipment obj:sHlist)
                       {
                        out.writeObject(obj);
                       }
                        out.flush ();
                    } catch (Exception e){
                        //e.printStackTrace ();
                    }finally{
                        try{
                            if (out != null) out.close();
                        }catch (Exception e){
                            //e.printStackTrace();
                        }
                         } 
                }
                return true;
            }

           
        };
        worker.execute(); 
}
class AppendableObjectOutputStream extends ObjectOutputStream {
       public AppendableObjectOutputStream(OutputStream out) throws IOException {
        super(out);
    }
  @Override
    protected void writeStreamHeader() throws IOException {}
    
  }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i = 0; i< dm.getRowCount() ; i++)
        {
            if( (boolean)dm.getValueAt(i, 3) == true)
            {
                selectedIDs.add((String)dm.getValueAt(i, 2));
            }
        }
        
        
        
        for(Shipment obj : sHlist)
        {
            for(String s : selectedIDs)
            {
                if(obj.get_trackID().equals(s))
                {
                    obj.set_currentLocation(division);
                    obj.set_dateReceived(LocalDate.now());
                    obj.set_deliveryStatus(false);
                    obj.set_procesedby(username);  
                    ownerIDs.add(obj.get_ownerID());
                }
            }
        }
        int i =0;
        for(PersonalCustomer obj : pClist)
        {
            for(String s : ownerIDs)
            {
                if(obj.getID().equals(s))
                {
                    sendEmail(obj.get_email(), selectedIDs.get(i));
                    i++;
                }
            }
        }
        for(BusinessCustomer obj : bClist)
        {
            for(String s : ownerIDs)
            {
                if(obj.getID().equals(s))
                {
                    sendEmail(obj.get_email(), selectedIDs.get(i));
                    i++;
                }
            }
        }
        start_Update();
        JOptionPane.showMessageDialog(null, "Selected Shipments have been processed");
    }//GEN-LAST:event_jButton1ActionPerformed
    Loader li = new Loader();
    ArrayList<HubStaff> hSlist = new ArrayList<>();
    ArrayList<Shipment> sHlist = new ArrayList<>();
    ArrayList<PersonalCustomer> pClist = new ArrayList<>();
    ArrayList<BusinessCustomer> bClist = new ArrayList<>();
    ArrayList<String> selectedIDs = new ArrayList<>();
    ArrayList<String> selectedEmails = new ArrayList<>();
    ArrayList<String> ownerIDs = new ArrayList<>();
    String division;
    DefaultTableModel dm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable shipTable;
    // End of variables declaration//GEN-END:variables
}
